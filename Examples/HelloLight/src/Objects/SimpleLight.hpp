//
// Created by Bogdan on 12.11.2024.
//

#pragma once

#include <Bird/Base.hpp>
#include <Nest/Application/Application.hpp>

class SimpleLight {
public:
    SimpleLight();
    void update();
    void setUniforms(Bird::ProgramHandle programHandle);

private:
    struct DirLight;
    struct PointLight;
    struct SpotLight;
    void setDirLightUniforms(Bird::ProgramHandle programHandle, DirLight &light, int index);
    void setPointLightUniforms(Bird::ProgramHandle programHandle, PointLight &light, int index);
    void setSpotLightUniforms(Bird::ProgramHandle programHandle, SpotLight &light, int index);
    void setHorror();

    struct DirLight {
        /// Направление света в мировом пространстве.
        /// Вектор (x, y, z) задает направление, откуда исходит свет (например, солнце).
        /// Четвертый компонент (w) обычно равен 0, чтобы указать, что это направление, а не
        /// позиция.
        glm::vec4 direction;

        /// Фоновый (окружающий) цвет света.
        /// Определяет, как свет влияет на объекты, даже если они не находятся под прямым
        /// воздействием света. Обычно это слабый цвет, который добавляется ко всем объектам в
        /// сцене.
        glm::vec4 ambient;

        /// Диффузный цвет света.
        /// Определяет, как свет влияет на объекты, когда они находятся под прямым воздействием
        /// света. Этот цвет умножается на диффузный цвет материала объекта.
        glm::vec4 diffuse;

        /// Зеркальный (отраженный) цвет света.
        /// Определяет, как свет влияет на блики на объектах.
        /// Этот цвет умножается на зеркальный цвет материала объекта и зависит от угла между
        /// направлением света и нормалью поверхности.
        glm::vec4 specular;
    };

    struct PointLight {
        /// Позиция источника света в мировом пространстве.
        /// Вектор (x, y, z) задает точку, откуда исходит свет.
        /// Четвертый компонент (w) обычно равен 1, чтобы указать, что это позиция, а не
        /// направление.
        glm::vec4 position;

        /// Постоянный коэффициент затухания света.
        /// Определяет, насколько интенсивность света уменьшается с расстоянием.
        /// Этот коэффициент не зависит от расстояния и обычно используется для базового уровня
        /// затухания.
        glm::vec4 constant;

        /// Линейный коэффициент затухания света.
        /// Определяет, насколько интенсивность света уменьшается линейно с увеличением расстояния.
        /// Этот коэффициент умножается на расстояние до источника света.
        glm::vec4 linear;

        /// Квадратичный коэффициент затухания света.
        /// Определяет, насколько интенсивность света уменьшается квадратично с увеличением
        /// расстояния. Этот коэффициент умножается на квадрат расстояния до источника света.
        glm::vec4 quadratic;

        /// Фоновый (окружающий) цвет света.
        /// Аналогично DirLight, определяет слабый цвет, который добавляется ко всем объектам в
        /// сцене.
        glm::vec4 ambient;

        /// Диффузный цвет света.
        /// Определяет, как свет влияет на объекты, когда они находятся под прямым воздействием
        /// света.
        glm::vec4 diffuse;

        /// Зеркальный (отраженный) цвет света.
        /// Определяет, как свет влияет на блики на объектах.
        glm::vec4 specular;
    };

    struct SpotLight {
        /// Позиция источника света в мировом пространстве.
        /// Вектор (x, y, z) задает точку, откуда исходит свет.
        /// Четвертый компонент (w) обычно равен 1, чтобы указать, что это позиция, а не
        /// направление.
        glm::vec4 position;

        /// Направление света в мировом пространстве.
        /// Вектор (x, y, z) задает направление, в котором светит прожектор.
        /// Четвертый компонент (w) обычно равен 0, чтобы указать, что это направление, а не
        /// позиция.
        glm::vec4 direction;

        /// Косинус угла внутреннего конуса прожектора.
        /// Определяет, где начинается затухание света внутри конуса прожектора.
        /// Значение должно быть в диапазоне [0, 1], где 1 соответствует углу 0 градусов.
        glm::vec4 cutOff;

        /// Косинус угла внешнего конуса прожектора.
        /// Определяет, где заканчивается затухание света вне конуса прожектора.
        /// Значение должно быть в диапазоне [0, 1], где 1 соответствует углу 0 градусов.
        /// Обычно это значение больше, чем cutOff, чтобы создать плавное затухание.
        glm::vec4 outerCutOff;

        /// Постоянный коэффициент затухания света.
        /// Аналогично PointLight, определяет базовый уровень затухания.
        glm::vec4 constant;

        /// Линейный коэффициент затухания света.
        /// Аналогично PointLight, определяет линейное затухание с расстоянием.
        glm::vec4 linear;

        /// Квадратичный коэффициент затухания света.
        /// Аналогично PointLight, определяет квадратичное затухание с расстоянием.
        glm::vec4 quadratic;

        /// Фоновый (окружающий) цвет света.
        /// Аналогично DirLight и PointLight, определяет слабый цвет, который добавляется ко всем
        /// объектам в сцене.
        glm::vec4 ambient;

        /// Диффузный цвет света.
        /// Определяет, как свет влияет на объекты, когда они находятся под прямым воздействием
        /// света.
        glm::vec4 diffuse;

        /// Зеркальный (отраженный) цвет света.
        /// Определяет, как свет влияет на блики на объектах.
        glm::vec4 specular;
    };

    std::vector<DirLight> m_dirLights;
    std::vector<PointLight> m_pointLights;
    std::vector<SpotLight> m_spotLights;
    glm::vec4 m_shininess;
};
