//
// Created by Bogdan on 24.03.2025.
//

#pragma once

#include <Nest.hpp>

struct DirLight {
    /// Направление света в мировом пространстве.
    /// Вектор (x, y, z) задает направление, откуда исходит свет (например, солнце).
    /// Четвертый компонент (w) обычно равен 0, чтобы указать, что это направление, а не
    /// позиция.
    Nest::Vec4 direction;

    /// Фоновый (окружающий) цвет света.
    /// Определяет, как свет влияет на объекты, даже если они не находятся под прямым
    /// воздействием света. Обычно это слабый цвет, который добавляется ко всем объектам в
    /// сцене.
    Nest::Vec4 ambient;

    /// Диффузный цвет света.
    /// Определяет, как свет влияет на объекты, когда они находятся под прямым воздействием
    /// света. Этот цвет умножается на диффузный цвет материала объекта.
    Nest::Vec4 diffuse;

    /// Зеркальный (отраженный) цвет света.
    /// Определяет, как свет влияет на блики на объектах.
    /// Этот цвет умножается на зеркальный цвет материала объекта и зависит от угла между
    /// направлением света и нормалью поверхности.
    Nest::Vec4 specular;
};

struct PointLight {
    /// Позиция источника света в мировом пространстве.
    /// Вектор (x, y, z) задает точку, откуда исходит свет.
    /// Четвертый компонент (w) обычно равен 1, чтобы указать, что это позиция, а не
    /// направление.
    Nest::Vec4 position;

    /// Постоянный коэффициент затухания света.
    /// Определяет, насколько интенсивность света уменьшается с расстоянием.
    /// Этот коэффициент не зависит от расстояния и обычно используется для базового уровня
    /// затухания.
    Nest::Vec4 constant;

    /// Линейный коэффициент затухания света.
    /// Определяет, насколько интенсивность света уменьшается линейно с увеличением расстояния.
    /// Этот коэффициент умножается на расстояние до источника света.
    Nest::Vec4 linear;

    /// Квадратичный коэффициент затухания света.
    /// Определяет, насколько интенсивность света уменьшается квадратично с увеличением
    /// расстояния. Этот коэффициент умножается на квадрат расстояния до источника света.
    Nest::Vec4 quadratic;

    /// Фоновый (окружающий) цвет света.
    /// Аналогично DirLight, определяет слабый цвет, который добавляется ко всем объектам в
    /// сцене.
    Nest::Vec4 ambient;

    /// Диффузный цвет света.
    /// Определяет, как свет влияет на объекты, когда они находятся под прямым воздействием
    /// света.
    Nest::Vec4 diffuse;

    /// Зеркальный (отраженный) цвет света.
    /// Определяет, как свет влияет на блики на объектах.
    Nest::Vec4 specular;
};

struct SpotLight {
    /// Позиция источника света в мировом пространстве.
    /// Вектор (x, y, z) задает точку, откуда исходит свет.
    /// Четвертый компонент (w) обычно равен 1, чтобы указать, что это позиция, а не
    /// направление.
    Nest::Vec4 position;

    /// Направление света в мировом пространстве.
    /// Вектор (x, y, z) задает направление, в котором светит прожектор.
    /// Четвертый компонент (w) обычно равен 0, чтобы указать, что это направление, а не
    /// позиция.
    Nest::Vec4 direction;

    /// Косинус угла внутреннего конуса прожектора.
    /// Определяет, где начинается затухание света внутри конуса прожектора.
    /// Значение должно быть в диапазоне [0, 1], где 1 соответствует углу 0 градусов.
    Nest::Vec4 cutOff;

    /// Косинус угла внешнего конуса прожектора.
    /// Определяет, где заканчивается затухание света вне конуса прожектора.
    /// Значение должно быть в диапазоне [0, 1], где 1 соответствует углу 0 градусов.
    /// Обычно это значение больше, чем cutOff, чтобы создать плавное затухание.
    Nest::Vec4 outerCutOff;

    /// Постоянный коэффициент затухания света.
    /// Аналогично PointLight, определяет базовый уровень затухания.
    Nest::Vec4 constant;

    /// Линейный коэффициент затухания света.
    /// Аналогично PointLight, определяет линейное затухание с расстоянием.
    Nest::Vec4 linear;

    /// Квадратичный коэффициент затухания света.
    /// Аналогично PointLight, определяет квадратичное затухание с расстоянием.
    Nest::Vec4 quadratic;

    /// Фоновый (окружающий) цвет света.
    /// Аналогично DirLight и PointLight, определяет слабый цвет, который добавляется ко всем
    /// объектам в сцене.
    Nest::Vec4 ambient;

    /// Диффузный цвет света.
    /// Определяет, как свет влияет на объекты, когда они находятся под прямым воздействием
    /// света.
    Nest::Vec4 diffuse;

    /// Зеркальный (отраженный) цвет света.
    /// Определяет, как свет влияет на блики на объектах.
    Nest::Vec4 specular;
};

class ManagerLights {
public:
    void add(const DirLight &dirLight);
    void add(const PointLight &pointLight);
    void add(const SpotLight &spotLight);

private:
    std::vector<DirLight> m_dirLights;
    std::vector<PointLight> m_pointLights;
    std::vector<SpotLight> m_spotLights;
};
